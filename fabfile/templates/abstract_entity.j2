package {{ env.java_package_entity }};

import java.io.Serializable;
import java.time.ZonedDateTime;
import javax.annotation.Generated;
import javax.persistence.Column;
import javax.persistence.Embeddable;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.IdClass;
import javax.persistence.MappedSuperclass;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import lombok.AllArgsConstructor;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;

/** {{ table.class_name }} entity base class. Auto generated by JPA code generator. */
@Generated(value = "JPACodeGenerator")
@NoArgsConstructor
@AllArgsConstructor
@Getter
@Setter
@ToString
@EqualsAndHashCode
@MappedSuperclass
{% if table.has_composite_primary_keys() %}
@IdClass(Abstract{{ table.class_name }}.PK.class)
{% endif %}
public abstract class Abstract{{ table.class_name }} implements Serializable {
  {% for column in table.columns %}
  {% if table.is_primary_key(column) %}
  @Id
  {% endif %}
  @Column(name = "{{ column.name }}")
  {% if column.auto_increment != "" %}
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  {% endif %}
  {% if column.is_not_null() and column.auto_increment == "" and column.name != "created_at" and column.name != "updated_at" %}
  @NotNull
  {% endif %}
  {% if column.field_size %}
  @Size(max = {{ column.field_size }})
  {% endif %}
  private {{ column.field_type }} {{ column.field_name }};

  {% endfor %}
  {% if table.has_composite_primary_keys() %}
  public PK pk() {
    return new PK({% for column in table.get_primary_key().get_columns() %}{{ column.field_name }}{% if not loop.last %}, {% endif %}{% endfor %});
  }

  @NoArgsConstructor
  @AllArgsConstructor
  @Getter
  @ToString
  @EqualsAndHashCode
  @Embeddable
  public static class PK implements Serializable {
    {% for column in table.get_primary_key().get_columns() %}
    @Column(name = "{{ column.name }}")
    @NotNull
    private {{ column.field_type }} {{ column.field_name }};

    {% endfor %}
  }
  {% endif %}
}

