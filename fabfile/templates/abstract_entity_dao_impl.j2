package {{ env.java_package_entity_dao_impl }};

import {{ env.java_package_entity }}.Abstract{{ table.class_name }};
import {{ env.java_package_entity_dao }}.Abstract{{ table.class_name }}Dao;
import {{ env.java_package_entity_ext }}.{{ table.package_name }}.{{ table.class_name }};
import {{ env.java_package_entity_ext }}.{{ table.package_name }}.{{ table.class_name }}_;
import java.time.ZonedDateTime;
import java.util.List;
import java.util.Optional;
import javax.annotation.Generated;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Root;

/** {{ table.class_name }} DAO base class. Auto generated by JPA code generator. */
@Generated(value = "JPACodeGenerator")
public abstract class Abstract{{ table.class_name }}DaoImpl extends AbstractDaoImpl<{{ table.class_name }}>
    implements Abstract{{ table.class_name }}Dao {
  @PersistenceContext(unitName = "{{ database.name }}")
  private EntityManager entityManager;

  protected Abstract{{ table.class_name }}DaoImpl() {
    super({{ table.class_name }}.class);
  }

  protected Abstract{{ table.class_name }}DaoImpl(EntityManager entityManager) {
    super({{ table.class_name }}.class, entityManager);
    this.entityManager = entityManager;
  }

  @Override
  public EntityManager getEntityManager() {
    return this.entityManager;
  }

  @Override
  public {{ table.class_name }} persist({% for column in table.not_null_columns %}{{ column.field_type }} {{ column.field_name }}{% if not loop.last %}, {% endif %}{% endfor %}) {
    {{ table.class_name }} {{ table.camel_name }} = {{ table.class_name }}
        .builder()
        {% for column in table.not_null_columns %}
        .{{ column.field_name }}({{ column.field_name }})
        {% endfor %}
        .build();
    return persist({{ table.camel_name }});
  }
  {% for index in table.indices %}
  {% if index.type == "PRIMARY KEY" %}

  @Override
  public Optional<{{ table.class_name }}> find({% if index.is_composite_pk() %}Abstract{{ table.class_name }}.PK pk{% else %}{{ index.columns[0].field_type }} pk{% endif %}) {
    return super.find(pk);
  }
  {% endif %}
  {% if index.type == "UNIQUE KEY" %}

  @Override
  public {{ table.class_name }} findBy{{ index.get_combined_pascal_column_names() }}({% for column in index.columns %}{{ column.field_type }} {{ column.field_name }}{% if not loop.last %}, {% endif %}{% endfor %}) {
    CriteriaQuery<{{ table.class_name }}> query = criteriaQuery();
    Root<{{ table.class_name }}> root = query.from(getEntityClass());
    query
        .select(root)
        {% if index.columns|length == 1 %}
        .where(criteriaBuilder().equal(root.get({{ table.class_name }}_.{{ index.columns[0].field_name }}), {{ index.columns[0].field_name }}));
        {% else %}
        {# Composite keys #}
        .where(criteriaBuilder().and(
          {% for column in index.columns %}
          criteriaBuilder().equal(root.get({{ table.class_name }}_.{{ column.field_name }}), {{ column.field_name }}){% if not loop.last %}, {% endif %}

          {% endfor %}
        ));
        {% endif %}
    return uniqueResult(query);
  }
  {% endif %}
  {% if index.type == "KEY" %}

  @Override
  public List<{{ table.class_name }}> findAnyBy{{ index.get_combined_pascal_column_names() }}({% for column in index.columns %}{{ column.field_type }} {{ column.field_name }}{% if not loop.last %}, {% endif %}{% endfor %}) {
    CriteriaQuery<{{ table.class_name }}> query = criteriaQuery();
    Root<{{ table.class_name }}> root = query.from(getEntityClass());
    query
        .select(root)
        {% for column in index.columns %}
        .where(criteriaBuilder().equal(root.get({{ table.class_name }}_.{{ column.field_name }}), {{ column.field_name }}));
        {% endfor %}
    return list(query);
  }
  {% endif %}
  {% endfor %}

  @Override
  public List<{{ table.class_name }}> findAll() {
    CriteriaQuery<{{ table.class_name }}> query = criteriaQuery();
    Root<{{ table.class_name }}> root = query.from(getEntityClass());
    query.select(root);
    return list(query);
  }
}

