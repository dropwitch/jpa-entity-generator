package {{ env.java_package_entity_dao_impl }};

import {{ env.java_package_entity_dao }}.Abstract{{ table.class_name }}Dao;
import {{ env.java_package_entity_ext }}.{{ table.class_name }};
import {{ env.java_package_entity_ext }}.{{ table.class_name }}_;

import javax.persistence.EntityManager;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Root;
import org.joda.time.DateTime;

import java.util.List;

/**
 * {{ table.class_name }} DAO base class.
 * Auto generated by JPA code generator.
 */
@javax.annotation.Generated(value = "JPACodeGenerator")
public abstract class Abstract{{ table.class_name }}DaoImpl extends AbstractDaoImpl<{{ table.class_name }}> implements Abstract{{ table.class_name }}Dao {
    protected Abstract{{ table.class_name }}DaoImpl(EntityManager entityManager) {
        super(entityManager, {{ table.class_name }}.class);
    }

    public {{ table.class_name }} create({% for column in table.no_default_columns %}{{ column.field_type }} {{ column.field_name }}{% if not loop.last %}, {% endif %}{% endfor %}) {
        {{ table.class_name }} {{ table.camel_name }} = {{ table.class_name }}
                .builder()
                {% for column in table.columns %}
                {% if column.name != "id" and column.name != "created_at" and column.name != "updated_at" %}
                {% if column.default == "" %}
                .{{ column.field_name }}({{ column.field_name }})
                {% elif column.field_type == "boolean" %}
                .{{ column.field_name }}(false)
                {% elif column.field_type == "String" %}
                .{{ column.field_name }}("{{ column.default }}")
                {% else %}
                .{{ column.field_name }}({{ column.default }})
                {% endif %}
                {% endif %}
                {% endfor %}
                .build();
        getEntityManager().getTransaction().begin();
        getEntityManager().persist({{ table.camel_name }});
        getEntityManager().getTransaction().commit();
        return {{ table.camel_name }};
    }

    public List<{{ table.class_name }}> findAll() {
        CriteriaQuery<{{ table.class_name }}> query = criteriaQuery();
        Root<{{ table.class_name }}> root = query.from(getEntityClass());
        query.select(root);
        return list(query);
    }
    {% for index in table.indices %}
    {% if index.type != "KEY" %}

    public {{ table.class_name }} findBy{{ index.get_combined_pascal_column_names() }}({% for column in index.columns %}{{ column.field_type }} {{ column.field_name }}{% if not loop.last %}, {% endif %}{% endfor %}) {
        CriteriaQuery<{{ table.class_name }}> query = criteriaQuery();
        Root<{{ table.class_name }}> root = query.from(getEntityClass());
        query.select(root)
                {% if index.columns|length == 1 %}
                .where(criteriaBuilder().equal(root.get({{ table.class_name }}_.{{ index.columns[0].field_name }}), {{ index.columns[0].field_name }}));
                {% else %}
                {# Composite keys #}
                .where(criteriaBuilder().and(
                    {% for column in index.columns %}
                    criteriaBuilder().equal(root.get({{ table.class_name }}_.{{ column.field_name }}), {{ column.field_name }}){% if not loop.last %}, {% endif %}

                    {% endfor %}
                ));
                {% endif %}
        return uniqueResult(query);
    }
    {% else %}

    public List<{{ table.class_name }}> findAnyBy{{ index.get_combined_pascal_column_names() }}({% for column in index.columns %}{{ column.field_type }} {{ column.field_name }}{% if not loop.last %}, {% endif %}{% endfor %}) {
        CriteriaQuery<{{ table.class_name }}> query = criteriaQuery();
        Root<{{ table.class_name }}> root = query.from(getEntityClass());
        query.select(root)
                {% for column in index.columns %}
                .where(criteriaBuilder().equal(root.get({{ table.class_name }}_.{{ column.field_name }}), {{ column.field_name }}));
                {% endfor %}
        return list(query);
    }
    {% endif %}
    {% endfor %}
}

